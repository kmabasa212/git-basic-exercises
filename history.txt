    1  cd /mnt/c/Users/kmaba/Downloads/WitsShell-Project
    2  cd /mnt/C:\Users\kmaba\Downloads\WitsShell-Project (1)
    3  sudo apt update
    4  sudo apt install build-essential
    5  cd /mnt/c/Users/kmaba/Downloads/WitsShell-Project
    6  gcc witsshell.c -o witsshell
    7  ls
    8  cd Wits-Shell-Tester
    9  gcc witsshell.c -o witsshell
   10  ./witsshell
   11  cd witsshell.c
   12  ls
   13  gcc witsshell.c -o witsshell
   14  sudo apt update
   15  sudo apt install build-essential
   16  gcc witsshell.c -o witsshell
   17  ./witsshell batch.txt
   18  cd /mnt/c/Users/kmaba/Downloads/WitsShell-Project
   19  cd Wits-Shell-Tester
   20  cd witsshell.c
   21  ls
   22  gcc witsshell.c -o witsshell
   23  ./witsshell
   24  ls
   25  gcc witsshell.c -o witsshell
   26  ./witsshell
   27  gcc -o witsshell witsshell.c
   28  ./witsshell
   29  ./witsshell batch.txt
   30  ./witsshell
   31  ./witsshell batch.txt
   32  ./witsshell
   33  ls -la
   34  mkdir .vscode
   35  cd /mnt/c/Users/kmaba/Downloads/WitsShell-Project/Wits-Shell-Tester
   36  sudo apt update
   37  sudo apt install build-essential
   38  code .
   39  cd /mnt/c/Users/kmaba/Downloads/WitsShell-Project/Wits-Shell-Tester
   40  code .
   41  gcc -o witsshell witsshell.c
   42  ./witsshell
   43  ./witssh
   44  ./witsshell
   45  ./test-witsshell.sh
   46  diff tests/basic/1.out tests-out/basic/1.out
   47  ./test-witsshell.sh
   48  diff tests/7.out tests-out/7.out
   49  diff tests/7.err tests-out/7.err
   50  #include <stdio.h>
   51  #include <stdlib.h>
   52  #include <unistd.h>
   53  #include <sys/wait.h>
   54  #include <string.h>
   55  #include <fcntl.h>
   56  #include <stdbool.h>
   57  // Function Declarations
   58  void interactiveShell();
   59  void batchMode(char *fileName);
   60  void parseCommand(char* inputLine);
   61  void executeCommands(char *commands[]);
   62  void executeExternalCommand(char* args[]);
   63  void executeLS(char* args[]);
   64  void executeCD(char* args[]);
   65  void executePath(char* args[]);
   66  void handleRedirection(char *args[]);
   67  int checkEOF();
   68  bool commandExistsInPath(char* command);
   69  // Constants
   70  #define MAX_INPUT 1024
   71  #define DEFAULT_PATH "/bin/"
   72  // Global Variables
   73  char* searchPaths[MAX_INPUT];  // Array to store search paths
   74  char* currentCommand[MAX_INPUT];  // Stores the current command's arguments
   75  char* commandList[MAX_INPUT];  // Stores all commands (for batch mode)
   76  int numArgs = 0;  // Number of arguments in the current command
   77  int numCommands = 0;  // Number of commands in batch mode
   78  int numPaths = 1;  // Number of directories in the search path (start with /bin/)
   79  // Main Function: Handles shell startup in either interactive or batch mode
   80  int main(int argc, char *argv[]) {
   81      // Set default search path
   82      searchPaths[0] = DEFAULT_PATH;
   83      if (argc == 1) {
   84          // Run in interactive mode if no arguments are provided
   85          interactiveShell();
   86      } else if (argc == 2) {
   87          // Run in batch mode if a file is provided
   88          if (access(argv[1], F_OK) == 0) {
   89              batchMode(argv[1]);
   90          } else {
   91              // Error: Batch file not found
   92              char error_message[30] = "An error has occurred\n";
   93              write(STDERR_FILENO, error_message, strlen(error_message));
   94              return 1;
   95          }
   96      } else {
   97          // Error: Invalid number of arguments
   98          char error_message[30] = "An error has occurred\n";
   99          write(STDERR_FILENO, error_message, strlen(error_message));
  100          return 1;
  101      }
  102      return 0;
  103  }
  104  // Interactive Shell: Reads and executes commands in a loop
  105  void interactiveShell() {
  106      char *inputBuffer = NULL;
  107      size_t bufferSize = 0;
  108      while (true) {
  109          printf("witsshell> ");
  110          
  111          // Check for EOF (Ctrl-D) to exit
  112          if (checkEOF()) {
  113              exit(0);
  114          }
  115          // Get user input
  116          getline(&inputBuffer, &bufferSize, stdin);
  117          // Ignore empty input
  118          if (!strcmp(inputBuffer, "\n")) {
  119              continue;
  120          }
  121          // Remove newline character
  122          inputBuffer[strcspn(inputBuffer, "\n")] = 0;
  123          // Store the input as a single command and execute it
  124          commandList[0] = inputBuffer;
  125          numCommands = 1;
  126          // Execute the command(s)
  127          executeCommands(commandList);
  128      }
  129      free(inputBuffer);
  130  }
  131  // Batch Mode: Reads and executes commands from a file
  132  void batchMode(char *fileName) {
  133      int i = 0;
  134      FILE* batchFile = fopen(fileName, "r");
  135      if (!batchFile) {
  136          char error_message[30] = "An error has occurred\n";
  137          write(STDERR_FILENO, error_message, strlen(error_message));
  138      } else {
  139          char* line = NULL;
  140          size_t len = 0;
  141          while (getline(&line, &len, batchFile) != -1) {
  142              // Skip empty lines
  143              if (!strcmp(line, "\n")) {
  144                  continue;
  145              }
  146              line[strcspn(line, "\n")] = 0;
  147              commandList[i] = strdup(line);
  148              i++;
  149          }
  150          numCommands = i;
  151          fclose(batchFile);
  152          free(line);
  153          // Execute the commands in batch mode
  154          executeCommands(commandList);
  155      }
  156  }
  157  // Parse a command line into arguments
  158  void parseCommand(char* inputLine) {
  159      int i = 0;
  160      memset(currentCommand, 0, sizeof(currentCommand));  // Reset command array
  161      char *token = strtok(inputLine, " ");
  162      
  163      // Extract tokens (command and arguments)
  164      while (token != NULL) {
  165          currentCommand[i] = token;
  166          token = strtok(NULL, " ");
  167          i++;
  168      }
  169      numArgs = i;  // Number of arguments in the command
  170  }
  171  // Execute Commands: Handles built-in commands and external commands
  172  void executeCommands(char *commands[]) {
  173      for (int i = 0; i < numCommands; i++) {
  174          parseCommand(commands[i]);
  175          // Handle redirection before execution
  176          handleRedirection(currentCommand);
  177          // Check if the command is a background job
  178          bool background = false;
  179          if (numArgs > 0 && !strcmp(currentCommand[numArgs - 1], "&")) {
  180              background = true;
  181              currentCommand[numArgs - 1] = NULL;  // Remove '&' from arguments
  182          }
  183          // Fork to create a new process
  184          pid_t pid = fork();
  185          if (pid == 0) {
  186              // Child process
  187              if (!strcmp(currentCommand[0], "ls")) {
  188                  executeLS(currentCommand);
  189              } else if (!strcmp(currentCommand[0], "pwd")) {
  190                  char *args[] = {"/bin/pwd", NULL};
  191                  executeExternalCommand(args);
  192              } else if (!strcmp(currentCommand[0], "exit")) {
  193                  if (numArgs == 1) {
  194                      exit(0);
  195                  } else {
  196                      fprintf(stderr, "An error has occurred\n");
  197                  }
  198              } else if (!strcmp(currentCommand[0], "echo")) {
  199                  for (int j = 1; j < numArgs; j++) {
  200                      printf("%s ", currentCommand[j]);
  201                  }
  202                  printf("\n");
  203              } else if (!strcmp(currentCommand[0], "cd")) {
  204                  executeCD(currentCommand);
  205              } else if (!strcmp(currentCommand[0], "path")) {
  206                  executePath(currentCommand);
  207              } else if (commandExistsInPath(currentCommand[0])) {
  208                  executeExternalCommand(currentCommand);
  209              } else {
  210                  fprintf(stderr, "An error has occurred\n");
  211              }
  212              exit(0);  // Exit the child process
  213          } else if (pid > 0) {
  214              // Parent process
  215              if (!background) {
  216                  wait(NULL);  // Wait for the child process to complete
  217              }
  218          } else {
  219              perror("fork failed");
  220          }
  221      }
  222  }
  223  // Check for EOF or Ctrl-D to exit shell
  224  int checkEOF() {
  225      if (feof(stdin)) return 1;
  226      int c = getc(stdin);
  227      if (c == EOF) return 1;
  228      ungetc(c, stdin);
  229      return 0;
  230  }
  231  // Execute 'ls' command
  232  void executeLS(char* args[]) {
  233      // Handle ls with or without arguments
  234      if (fork() == 0) {
  235          if (numArgs == 1) {
  236              char *defaultArgs[] = {"/bin/ls", NULL};  // No arguments
  237              execvp("/bin/ls", defaultArgs);
  238          } else {
  239              execvp("/bin/ls", args);  // With arguments
  240          }
  241          perror("execvp failed");  // If execvp fails, print an error
  242          exit(1);
  243      } else {
  244          wait(NULL);  // Parent waits for child process to complete
  245      }
  246  }
  247  // Execute 'cd' command: Change directory
  248  void executeCD(char* args[]) {
  249      if (numArgs != 2) {
  250          char error_message[30] = "An error has occurred\n";
  251          write(STDERR_FILENO, error_message, strlen(error_message));
  252      } else if (chdir(args[1]) != 0) {
  253          perror("chdir failed");
  254      }
  255  }
  256  // Execute 'path' command: Update the search path
  257  void executePath(char* args[]) {
  258      if (numArgs == 1) {
  259          // Clear the path if no arguments are provided
  260          memset(searchPaths, 0, sizeof(searchPaths));
  261          numPaths = 0;
  262      } else {
  263          // Update the search paths
  264          for (int i = 1; i < numArgs; i++) {
  265              searchPaths[i - 1] = args[i];
  266          }
  267          numPaths = numArgs - 1;
  268      }
  269  }
  270  // Handle Redirection: Redirect output to a file
  271  void handleRedirection(char *args[]) {
  272      int i = 0;
  273      int outFile = -1;
  274      // Iterate through arguments to find '>'
  275      while (args[i] != NULL) {
  276          if (!strcmp(args[i], ">")) {
  277              if (args[i + 1] == NULL) {
  278                  fprintf(stderr, "An error has occurred\n");
  279                  return;
  280              }
  281              // Open the output file
  282              outFile = open(args[i + 1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
  283              if (outFile < 0) {
  284                  perror("open failed");
  285                  return;
  286              }
  287              // Redirect stdout to the file
  288              dup2(outFile, STDOUT_FILENO);
  289              close(outFile);
  290              // Remove the redirection part from args
  291              args[i] = NULL;
  292              break;
  293          }
  294          i++;
  295      }
  296  }
  297  // Execute an external command
  298  void executeExternalCommand(char* args[]) {
  299      if (fork() == 0) {
  300          char path[MAX_INPUT];
  301          for (int i = 0; i < numPaths; i++) {
  302              snprintf(path, sizeof(path), "%s%s", searchPaths[i], args[0]);
  303              execv(path, args);
  304          }
  305          perror("execv failed");  // If execv fails, print an error
  306          exit(1);
  307      } else {
  308          wait(NULL);  // Parent waits for child process to complete
  309      }
  310  }
  311  // Check if a command exists in the PATH
  312  bool commandExistsInPath(char* command) {
  313      char path[MAX_INPUT];
  314      for (int i = 0; i < numPaths; i++) {
  315          snprintf(path, sizeof(path), "%s%s", searchPaths[i], command);
  316          if (access(path, X_OK) == 0) {
  317              return true;
  318          }
  319      }
  320      return false;
  321  }
  322  cd /mnt/c/Users/kmaba/Downloads/WitsShell-Project/Wits-Shell-Tester
  323  code .
  324  gcc -o witsshell witsshell.c
  325  ./witsshell
  326  .\test-witsshell.sh
  327  ./test-witsshell.sh
  328  ./witsshell batch.txt
  329  ./test-witsshell.sh
  330  sudo apt update
  331  sudo apt install build-essential gdb
  332  ./test-witsshell.sh
  333  gcc -o witsshell witsshell.c
  334  ./witsshell
  335  ./test-witsshell.sh
  336  ./witsshell
  337  ./witsshell batch.txt
  338  ./witsshell
  339  cd /mnt/c/Users/kmaba/Downloads/WitsShell-Project/Wits-Shell-Tester
  340  code .
  341  ./test-witsshell.sh
  342  ./witsshell
  343  ./test-witsshell.sh
  344  cd /mnt/c/Users/kmaba/Downloads/WitsShell-Project/Wits-Shell-Tester
  345  code .
  346  cd /mnt/c/Users/kmaba/Downloads/WitsShell-Project/Wits-Shell-Tester
  347  code .
  348  gcc -o witsshell witsshell.c
  349  ./test-witsshell.sh
  350  gcc -o witsshell witsshell.c
  351  ./test-witsshell.sh
  352  diff tests/basic/1.out tests-out/basic/1.out
  353  diff tests/basic/2.out tests-out/basic/2.out
  354  gcc -o witsshell witsshell.c
  355  ./test-witsshell.sh
  356  gcc -o witsshell witsshell.c
  357  ./test-witsshell.sh
  358  nolitha@Khomisani:/mnt/c/Users/kmaba/Downloads/WitsShell-Project/Wits-Shell-Tester$ gcc -o witsshell witsshell.c
  359  nolitha@Khomisani:/mnt/c/Users/kmaba/Downloads/WitsShell-Project/Wits-Shell-Tester$ ./test-witsshell.sh
  360  -c
  361  --
  362  -c --
  363  Started Basic Tests
  364  Input to check ls command without arguments
  365  test 1: 1.out incorrect
  366  Input to check ls command .. arg
  367  test 2: 2.out incorrect
  368  Input to check echo command
  369  test 3: 3.out incorrect
  370  Input to check exit
  371  test 4: 4.out incorrect
  372  Finished Basic Tests
  373  Input to check bad cd. No arguments are passed to cd.
  374  test 1: 1.out incorrect
  375  2 arguments are passed to cd.
  376  test 2: 2.out incorrect
  377  ls with a bad directory name.
  378  test 3: 3.out incorrect
  379  Input to run misc. commands.
  380  test 4: 4.out incorrect
  381  Tries to exit with an argument. Should throw an error.
  382  test 5: 5.out incorrect
  383  test 5: 5.err incorrect
  384  Try running a shell script without setting path.
  385  test 6: 6.out incorrect
  386  Set path, run a shell script. Overwrite path and then try running the script again.
  387  test 7: 7.out incorrect
  388  test 7: 7.err incorrect
  389  Redirection with no output file specified.
  390  test 8: 8.out incorrect
  391  Redirection with multiple output files.
  392  test 9: 9.out incorrect
  393  test 9: 9.err incorrect
  394  Redirection with multiple '>'
  395  test 10: 10.out incorrect
  396  test 10: 10.err incorrect
  397  Normal redirection.
  398  test 11: 11.out incorrect
  399  test 11: 11.err incorrect
  400  Input to check bad redirection. Contains no command before '>'.
  401  test 12: 12.rc incorrect
  402  test 12: 12.err incorrect
  403  Input file is valid and empty. But shell is invoked in batch mode with 2 files (with same file 13.in used twice)
  404  test 13: passed
  405  Shell is invoked with a bad batch file.
  406  test 14: passed
  407  Tests command with variable whitespace.
  408  test 15: 15.rc incorrect
  409  test 15: 15.out incorrect
  410  test 15: 15.err incorrect
  411  Command only contains &
  412  test 16: 16.out incorrect
  413  gcc -o witsshell witsshell.c
  414  ./test-witsshell.sh
  415  nolitha@Khomisani:/mnt/c/Users/kmaba/Downloads/WitsShell-Project/Wits-Shell-Tester$ gcc -o witsshell witsshell.c
  416  nolitha@Khomisani:/mnt/c/Users/kmaba/Downloads/WitsShell-Project/Wits-Shell-Tester$ ./test-witsshell.sh
  417  -c
  418  --
  419  -c --
  420  Started Basic Tests
  421  Input to check ls command without arguments
  422  test 1: 1.out incorrect
  423  Input to check ls command .. arg
  424  test 2: 2.out incorrect
  425  Input to check echo command
  426  test 3: 3.out incorrect
  427  Input to check exit
  428  test 4: 4.out incorrect
  429  Finished Basic Tests
  430  Input to check bad cd. No arguments are passed to cd.
  431  test 1: 1.out incorrect
  432  2 arguments are passed to cd.
  433  test 2: 2.out incorrect
  434  ls with a bad directory name.
  435  test 3: 3.out incorrect
  436  Input to run misc. commands.
  437  test 4: 4.out incorrect
  438  Tries to exit with an argument. Should throw an error.
  439  test 5: 5.out incorrect
  440  test 5: 5.err incorrect
  441  Try running a shell script without setting path.
  442  test 6: 6.out incorrect
  443  Set path, run a shell script. Overwrite path and then try running the script again.
  444  test 7: 7.out incorrect
  445  test 7: 7.err incorrect
  446  Redirection with no output file specified.
  447  test 8: 8.out incorrect
  448  Redirection with multiple output files.
  449  test 9: 9.out incorrect
  450  test 9: 9.err incorrect
  451  Redirection with multiple '>'
  452  test 10: 10.out incorrect
  453  test 10: 10.err incorrect
  454  Normal redirection.
  455  test 11: 11.out incorrect
  456  test 11: 11.err incorrect
  457  Input to check bad redirection. Contains no command before '>'.
  458  test 12: 12.rc incorrect
  459  test 12: 12.err incorrect
  460  Input file is valid and empty. But shell is invoked in batch mode with 2 files (with same file 13.in used twice)
  461  test 13: passed
  462  Shell is invoked with a bad batch file.
  463  test 14: passed
  464  Tests command with variable whitespace.
  465  test 15: 15.rc incorrect
  466  test 15: 15.out incorrect
  467  test 15: 15.err incorrect
  468  Command only contains &
  469  gcc -o witsshell witsshell.c
  470  ./test-witsshell.sh
  471  gcc -o witsshell witsshell.c
  472  ./test-witsshell.sh
  473  gcc -o witsshell witsshell.c
  474  ./test-witsshell.sh
  475  gcc -o witsshell witsshell.c
  476  ./test-witsshell.sh
  477  gcc -o witsshell witsshell.c
  478  ./test-witsshell.sh
  479  gcc -o witsshell witsshell.c
  480  ./test-witsshell.sh
  481  gcc -o witsshell witsshell.c
  482  ./test-witsshell.sh
  483  gcc -o witsshell witsshell.c
  484  ./test-witsshell.sh
  485  gcc -o witsshell witsshell.c
  486  ./test-witsshell.sh
  487  gcc -o witsshell witsshell.c
  488  ./test-witsshell.sh
  489  gcc -o witsshell witsshell.c
  490  ./test-witsshell.sh
  491  gcc -o witsshell witsshell.c
  492  ./test-witsshell.sh
  493  ./witsshell
  494  ./witsshell batch.txt
  495  ./witsshell
  496  gcc -o witsshell witsshell.c
  497  ./test-witsshell.sh
  498  gcc -o witsshell witsshell.c
  499  ./test-witsshell.sh
  500  gcc -o witsshell witsshell.c
  501  ./test-witsshell.sh
  502  gcc -o witsshell witsshell.c
  503  ./test-witsshell.sh
  504  gcc -o witsshell witsshell.c
  505  ./test-witsshell.sh
  506  gcc -o witsshell witsshell.c
  507  ./test-witsshell.sh
  508  gcc -o witsshell witsshell.c
  509  ./test-witsshell.sh
  510  gcc -o witsshell witsshell.c
  511  ./test-witsshell.sh
  512  gcc -o witsshell witsshell.c
  513  ./test-witsshell.sh
  514  gcc -o witsshell witsshell.c
  515  ./test-witsshell.sh
  516  gcc -o witsshell witsshell.c
  517  ./test-witsshell.sh
  518  gcc -o witsshell witsshell.c
  519  ./test-witsshell.sh
  520  gcc -o witsshell witsshell.c
  521  ./test-witsshell.sh
  522  gcc -o witsshell witsshell.c
  523  ./test-witsshell.sh
  524  gcc -o witsshell witsshell.c
  525  ./test-witsshell.sh
  526  gcc -o witsshell witsshell.c
  527  ./test-witsshell.sh
  528  gcc -o witsshell witsshell.c
  529  ./test-witsshell.sh
  530  gcc -o witsshell witsshell.c
  531  ./test-witsshell.sh
  532  gcc -o witsshell witsshell.c
  533  ./test-witsshell.sh
  534  gcc -o witsshell witsshell.c
  535  ./test-witsshell.sh
  536  gcc -o witsshell witsshell.c
  537  ./test-witsshell.sh
  538  gcc -o witsshell witsshell.c
  539  ./test-witsshell.sh
  540  gcc -o witsshell witsshell.c
  541  ./test-witsshell.sh
  542  gcc -o witsshell witsshell.c
  543  ./test-witsshell.sh
  544  gcc -o witsshell witsshell.c
  545  ./test-witsshell.sh
  546  gcc -o witsshell witsshell.c
  547  ./test-witsshell.sh
  548  gcc -o witsshell witsshell.c
  549  ./test-witsshell.sh
  550  gcc -o witsshell witsshell.c
  551  ./test-witsshell.sh
  552  gcc -o witsshell witsshell.c
  553  ./test-witsshell.sh
  554  gcc -o witsshell witsshell.c
  555  ./test-witsshell.sh
  556  gcc -o witsshell witsshell.c
  557  ./test-witsshell.sh
  558  gcc -o witsshell witsshell.c
  559  ./test-witsshell.sh
  560  gcc -o witsshell witsshell.c
  561  ./test-witsshell.sh
  562  gcc -o witsshell witsshell.c
  563  ./test-witsshell.sh
  564  gcc -o witsshell witsshell.c
  565  ./test-witsshell.sh
  566  gcc -o witsshell witsshell.c
  567  ./test-witsshell.sh
  568  gcc -o witsshell witsshell.c
  569  ./test-witsshell.sh
  570  gcc -o witsshell witsshell.c
  571  ./test-witsshell.sh
  572  gcc -o witsshell witsshell.c
  573  ./test-witsshell.sh
  574  gcc -o witsshell witsshell.c
  575  ./test-witsshell.sh
  576  gcc -o witsshell witsshell.c
  577  ./test-witsshell.sh
  578  gcc -o witsshell witsshell.c
  579  ./test-witsshell.sh
  580  gcc -o witsshell witsshell.c
  581  ./test-witsshell.sh
  582  gcc -o witsshell witsshell.c
  583  ./test-witsshell.sh
  584  gcc -o witsshell witsshell.c
  585  ./test-witsshell.sh
  586  nolitha@Khomisani:/mnt/c/Users/kmaba/Downloads/WitsShell-Project/Wits-Shell-Tester$ ./test-witsshell.sh
  587  cd /mnt/c/Users/kmaba/Downloads/WitsShell-Project/Wits-Shell-Tester
  588  code .
  589  gcc -o witsshell witsshell.c
  590  ./test-witsshell.sh
  591  cd Downloads
  592  cd Downloads
  593  cd ~/AAAAssignment-main
  594  \\wsl$\Ubuntu-20.04\home\nolitha\AAAAssignment-main
  595  ls ~/AAAAssignment-main
  596  rcssserver3d
  597  cd Downloads
  598  rcssserver3d
  599  wsl --install
  600  wsl --update
  601  cd Downloads
  602  cat textfile.txt
  603  cd Desktop
  604  ls
  605  cat textfile.txt
  606  ls
  607  pwd
  608  bash shelltest,sh
  609  bash shelltest.sh
  610  echo $SHELL
  611  ./shelltest.sh
  612  ls -l
  613  chmod u+x shelltest.sh
  614  ./shelltest.sh
  615  echo Hello
  616  code .
  617  C:\Users\kmaba\Desktop\introToGit
  618  cd C:\Users\kmaba\Desktop\introToGit
  619  cd Desktop
  620  cd introToGit
  621  ls
  622  pwd
  623  code .
  624  man
  625  man man
  626  mkdir git-basic-exercises
  627  cd git-basic-exercises
  628  ls -a
  629  git init
  630  ls -a
  631  git status
  632  touch README.md
  633  ls -a
  634  git status
  635  git log
  636  git add
  637  git status
  638  git add README.md
  639  git status
  640  git rm --cahched README.md
  641  git status
  642  git restore --staged README.md
  643  git status 
  644  git commit -m "adding README.md file"
  645  git status
  646  git config --global user.email "kmabasa212@gmail.com"
  647  git config --global user.name "Khomisani"
  648  git status
  649  git add .
  650  git status
  651  git commit -m "Add README.md"
  652  git status
  653  git rm --cahched README.md
  654  git status
  655  git restore --staged .
  656  git status
  657  ls -a
  658  cd Downloads
  659  cd 'c:/Users/kmaba/Desktop/git-basic-exercises'
  660  cd /mnt/c/Users/kmaba/Desktop/git-basic-exercises
  661  ls -a
  662  git config --global user.email "kmabasa212@gmail.com"
  663  git config --global user.name "Khomisani"
  664  git init
  665  ls -a
  666  git status
  667  touch README.md
  668  ls -a
  669  git status
  670  git log
  671  git add .
  672  git status
  673  git rm --cached README.md
  674  git status
  675  git add .
  676  git status
  677  git commit -m "initial commit"
  678  git log
  679  q
  680  nano README.md
  681  cat README.md
  682  git status
  683  git commit -m "second commit"
  684  git status
  685  git add .
  686  git status
  687  git commit -m "second commit"
  688  nano README.md
  689  cat README.md
  690  git status
  691  git add .
  692  git commit -m "third commit"
  693  git status
  694  gir log
  695  git log
  696  q
  697  git checkout 43217e65d3aadd379ed3a630a27231a80137c5cf
  698  cat README.md
  699  git checkout main
  700  git checkout master
  701  cat README.md
  702  git branch
  703  git branch milkshake-flavours
  704  git branch
  705  git checkout milkshake-flavours
  706  git branch
  707  nano milkshakes.md
  708  git status
  709  git add .
  710  git status
  711  git commit -m "added initial flavours"
  712  git status
  713  git log
  714  git checkout master
  715  git log
  716  git branch history
  717  git branch
  718  git checkout history
  719  git branch
  720  git log
  721  git branch
  722  history > history.txt
